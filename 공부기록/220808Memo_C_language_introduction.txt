2022.08.08 Memo

컴파일러 언어(compiler language)
· 컴파일러를 통해 소스코드 전체를 기계어로 번역 후 실행
· 실행속도가 빠르지만 수정이 어렵다는 단점이 있음
·  Java가 해당됨

인터프리터 언어(interpreter language)
· 인터프리터를 통해 한줄씩 기계어로 번역하며 실행
· 실행속도는 느리지만 수정이 쉽다는 장점이 있음
· 자주 변경되는 프로그램을 만들때 사용됨
· python이 해당됨

C언어의 특징
· 시스템프로그램 개발에도 적합
· 절차지향적 → 정해진 순서의 흐름이 중요
· 이식성이 좋음. CPU종류와 관계없이 실행 가능. OS차이에도 덜 민감함
· 성능에 민감한 소프트웨어 개발시 유용
· 사용메모리양 적고 속도저하요소도 적음

C프로그램 빌드과정
hello.c  --(compile)-->  hello.o --(linker)--> hello.exe
· hello.c    : 소스파일
· hello.o    : 소스파일을 컴파일한 object program
· hello.exe : 실행파일

C컴파일러
· GCC          : IDE(Integrated Development Environment)제공하지 않음. 명령형 방식
· Visual C++ : Microsoft사에서 개발. IDE(통합개발환경)제공. 편리함
· Clang        : LLVM프로젝트 중 하나. 다양한 디바이스를 타겟으로 할때 유리

프로젝트 1개당 실행파일도 1개. 프로젝트 이름 = 실행파일 이름

"C언어는 함수에서 시작해서 함수에서 끝난다" ← C언어에서 함수가 매우매우 중요

함수
· 함수의 정의    : 함수를 구성해서 만드는 것
· 함수의 호출    : 함수의 실행을 명령하는 것
· 함수 인자전달 : 함수 실행 명령시 전달하는 입력값 
· 함수의 구조    : int main () { … }
	- int : 함수의 반환값. 출력 형태
		* void : 함수의 반환값이 없다는 의미
	- main : 함수의 이름. 식별자
	- 중괄호 내부 : 함수의 몸체

주석
· line comment   : // …
· block comment : /* … */

출력, 입력을 위해 <stdio.h>헤더파일 삽입 필수!
STanDard Input/Output → stdio

return문
· 예) return 0;
· 함수 호출한 영역으로 값을 전달(반환)
· 현재 실행중인 함수를 종료
