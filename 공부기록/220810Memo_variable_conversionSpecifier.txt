2022.08.10 Memo

# 변수와 자료형
변수 : 값을 저장할 수 있는 데이터 공간. 값을 담아두는 곳
· 이 저장공간에 이름을 붙여 알아보기 쉽게 할 것. 변수의 이름 = 변수의 '식별자'
· 어떤 값을 담을 것인지 '자료형'을 미리 선언해야 함

자료형(괄호 안의 숫자는 해당 자료형의 저장공간 크기. 단위는 byte)
· void : 값이 없음을 알려주기 위한 자료형
· char(1) : 문자, 정수
· int(4), short(2), long(4), long long(4) : 정수
· double(8), float(4), long double(8) : 실수
- 다양한 자료형이 존재하는 이유 : 메모리를 효율적으로 사용하기 위함
- CPU : 연산시 int형 연산 / GPU : 연산시 실수형 연산

변수 선언과 초기화
· int num = 10;
→ ['num' 이라는 이름이 붙은 메모리 공간에 'int'형의 값 '10'을 대입해 두겠다]는 의미
· int num;
→ 위와 같이 int형 변수 num을 선언만 하고 초기화 하지 않을 경우(초기화 : 선언과 동시에 값을 대입)
	아무 의미 없는 값, 즉 '쓰레기 값'이 대입됨
· 컴파일러별로 약간의 차이는 있으나 원칙적으로 변수선언은 중괄호 내의 최상단에 하는 것이 원칙
· 변수의 식별자 작성 규칙
	- 알파벳, 숫자, 언더바(_)로 구성
	- 숫자로 시작 불가능
	- 공백 포함 불가
	- 키워드 사용 불가


# 제어문자(Escape Sequence)
· 키보드로 입력하기 힘든 문자, 특수기능문자들을 표현하기 위해 사용
· 종류 : \n, \t, \', \", \\(backslash기호는 원화기호￦키보드로 입력)


# 서식지정자(Conversion Specifier)
· 정수의 서식지정자 : %d, %o, %x, %X
	- %d : decimal. 10진수 정수 표현
	- %o : octal. 8진수 정수 표현
	- %x : hexadecimal. 16진수 정수 표현. 영문자를 소문자로 표기
	- %X : hexadecimal. 16진수 정수 표현. 영문자를 대문자로 표기
- 10 → 10진수 : 10 / 8진수 : 12(012) / 16진수 : a(0xa), A(0XA)
- 괄호 안에 쓰여있는 것 처럼 진법을 표시하고 싶을 경우 %#o, %#x, %#X이렇게 #(hash) 기입

· 실수의 서식지정자 : %f, %e, %E, %g
	- %f : 부동소수점 형태로 표기(ex- 0.072). 소숫점아래 6번째 자리까지 표기가능
	- %e : 지수표기법 형태로 표기(ex- 7.2e-2)
	- %E : 지수표기법 형태로 표기(ex- 7.2E-2)
	- %g : 부동소수점표기, 지수표기법 중 간단한 것으로 출력. 컴파일러 자체적으로 판단

· 문자의 서식지정자 : %c
	- 문자도 숫자로 변환해 출력 가능. 아스키코드 참고
	- 'A' = 65, 'a' = 97
	- 'A'와 "A"는 엄연히 다르다는 것에 주의.

#연산자(operator)
· 대입연산자 : =
· 산술연산자 : +, -, *, /, %
	- / : 정수끼리 연산시 몫을 반환, 실수끼리 연산시에는 일반 나눗셈과 동일
	- % : 정수끼리 연산시 나머지를 반환하는 연산자
	- +, - : 피연산자가 두개일때는 덧셈과 뺄셈연산자, 피연산자가 하나일때는 부호를 의미
· 복합대입연산자 : *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |=
· 증감연산자 : ++num, --num(선증감 후연산), num++, num--(선연산 후증감)
		값을 1증가시키거나 감소시키는 연산자
	(★조금 복잡한 코드 이해하기 어려웠으나 해결! 다시 복습필요!!)
